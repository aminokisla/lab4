import ast
import inspect
import graphviz
from pathlib import Path

from generate_uml import UMLGenerator


class AdvancedUMLGenerator:
    def __init__(self):
        self.classes = {}
        self.relationships = []

    def analyze_class_dependencies(self, class_obj):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞"""
        dependencies = set()

        try:
            source = inspect.getsource(class_obj)
            tree = ast.parse(source)

            for node in ast.walk(tree):
                # –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –≤ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è—Ö —Ç–∏–ø–æ–≤
                if isinstance(node, ast.AnnAssign):
                    if isinstance(node.annotation, ast.Name):
                        dependencies.add(node.annotation.id)

                # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
                if isinstance(node, ast.Call):
                    if isinstance(node.func, ast.Name):
                        dependencies.add(node.func.id)

                # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å —Ç–∏–ø–∞–º–∏
                if isinstance(node, ast.Attribute):
                    if isinstance(node.value, ast.Name):
                        dependencies.add(node.value.id)

        except (TypeError, OSError):
            pass

        return dependencies

    def generate_enhanced_diagram(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã
        try:
            from book import Book
            from reader import Reader
            from library import Library
            from main_window import LibraryApp

            classes_to_analyze = [Book, Reader, Library, LibraryApp]

            for cls in classes_to_analyze:
                class_name = cls.__name__
                methods = [method for method in dir(cls)
                           if not method.startswith('_') and callable(getattr(cls, method))]
                attributes = [attr for attr in dir(cls)
                              if not attr.startswith('_') and not callable(getattr(cls, attr))]

                dependencies = self.analyze_class_dependencies(cls)

                self.classes[class_name] = {
                    'methods': methods,
                    'attributes': attributes,
                    'dependencies': dependencies
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                for base in cls.__bases__:
                    if base.__name__ != 'object':
                        self.relationships.append({
                            'from': class_name,
                            'to': base.__name__,
                            'type': 'inheritance'
                        })

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                for dep in dependencies:
                    if dep in [c.__name__ for c in classes_to_analyze]:
                        self.relationships.append({
                            'from': class_name,
                            'to': dep,
                            'type': 'dependency'
                        })

            self._create_enhanced_dot_file()

        except ImportError as e:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

    def _create_enhanced_dot_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π DOT —Ñ–∞–π–ª"""
        dot = graphviz.Digraph(comment='Enhanced UML Class Diagram')
        dot.attr(rankdir='TB', splines='ortho')

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∞—Å—Å–æ–≤
        colors = {
            'Book': 'lightblue',
            'Reader': 'lightgreen',
            'Library': 'lightyellow',
            'LibraryApp': 'lightcoral'
        }

        for class_name, info in self.classes.items():
            # –§–æ—Ä–º–∏—Ä—É–µ–º label –¥–ª—è –∫–ª–∞—Å—Å–∞
            label = f'{{{class_name}'

            # –ê—Ç—Ä–∏–±—É—Ç—ã
            if info['attributes']:
                attrs = '\\n'.join([f'+ {attr}' for attr in info['attributes'][:5]])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                label += f'|{attrs}'

            # –ú–µ—Ç–æ–¥—ã
            if info['methods']:
                methods = '\\n'.join([f'+ {method}()' for method in info['methods'][:8]])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                label += f'|{methods}'

            label += '}'

            # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª
            color = colors.get(class_name, 'lightgray')
            dot.node(class_name, label, shape='record', style='filled',
                     fillcolor=color, fontname='Arial', fontsize='10')

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        for rel in self.relationships:
            if rel['type'] == 'inheritance':
                dot.edge(rel['from'], rel['to'], arrowhead='onormal',
                         style='dashed', color='darkgreen')
            elif rel['type'] == 'dependency':
                dot.edge(rel['from'], rel['to'], arrowhead='open',
                         style='dashed', color='blue')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        dot.render('enhanced_class_diagram', format='png', cleanup=True)
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ enhanced_class_diagram.png")


def generate_pylint_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç pylint"""
    import subprocess

    print("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ pylint...")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª pylint
    pylint_config = """
[MESSAGES CONTROL]
disable=C0103,C0301,R0903,R0913,R0914

[REPORTS]
output-format=text
reports=yes
"""

    with open('.pylintrc', 'w') as f:
        f.write(pylint_config)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    files = ['book.py', 'reader.py', 'library.py', 'main_window.py', 'main.py']

    for file in files:
        if Path(file).exists():
            print(f"\n{'=' * 60}")
            print(f"–ê–ù–ê–õ–ò–ó {file}")
            print('=' * 60)

            try:
                result = subprocess.run([
                    'pylint', '--rcfile=.pylintrc', file
                ], capture_output=True, text=True)

                print(result.stdout)

                if result.returncode != 0:
                    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {file}: {e}")


if __name__ == "__main__":
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    generate_pylint_report()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UML –¥–∏–∞–≥—Ä–∞–º–º
    print("\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UML –¥–∏–∞–≥—Ä–∞–º–º...")

    # –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    simple_gen = UMLGenerator('.')
    simple_gen.parse_python_files()
    simple_gen.analyze_relationships()
    simple_gen.generate_diagram('simple_class_diagram')

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    advanced_gen = AdvancedUMLGenerator()
    advanced_gen.generate_enhanced_diagram()

    print("\nüéâ –í—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –æ—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")