import os
import subprocess
import ast
import graphviz
from pathlib import Path


class UMLGenerator:
    def __init__(self, project_path):
        self.project_path = project_path
        self.classes = {}
        self.relationships = []

    def parse_python_files(self):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö"""
        python_files = list(Path(self.project_path).glob("**/*.py"))

        for file_path in python_files:
            if file_path.name.startswith('__') or 'test' in file_path.name.lower():
                continue

            with open(file_path, 'r', encoding='utf-8') as file:
                try:
                    tree = ast.parse(file.read(), filename=str(file_path))
                    self._extract_classes_from_ast(tree, file_path)
                except SyntaxError as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ {file_path}: {e}")

    def _extract_classes_from_ast(self, tree, file_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö –∏–∑ AST"""
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef):
                class_info = {
                    'name': node.name,
                    'file': file_path.name,
                    'methods': [],
                    'attributes': [],
                    'bases': []
                }

                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã
                for base in node.bases:
                    if isinstance(base, ast.Name):
                        class_info['bases'].append(base.id)

                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥—ã –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
                for item in node.body:
                    if isinstance(item, ast.FunctionDef):
                        class_info['methods'].append(item.name)
                    elif isinstance(item, ast.Assign):
                        for target in item.targets:
                            if isinstance(target, ast.Name):
                                class_info['attributes'].append(target.id)

                self.classes[node.name] = class_info

    def analyze_relationships(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏"""
        for class_name, class_info in self.classes.items():
            # –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            for base_class in class_info['bases']:
                if base_class in self.classes:
                    self.relationships.append({
                        'from': class_name,
                        'to': base_class,
                        'type': 'inheritance'
                    })

            # –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ (–ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –º–µ—Ç–æ–¥–∞—Ö)
            for method in class_info['methods']:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
                pass

    def generate_dot_file(self, output_file='classes.dot'):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç DOT —Ñ–∞–π–ª –¥–ª—è Graphviz"""
        dot = graphviz.Digraph(comment='UML Class Diagram', format='png')
        dot.attr(rankdir='TB', splines='ortho')

        # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
        for class_name, class_info in self.classes.items():
            label = f'{{{class_name}'

            # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            if class_info['attributes']:
                label += '|' + '\\n'.join([f'+ {attr}' for attr in class_info['attributes']])

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã
            if class_info['methods']:
                label += '|' + '\\n'.join([f'+ {method}()' for method in class_info['methods']])

            label += '}'

            dot.node(class_name, label, shape='record', style='filled',
                     fillcolor='lightblue', fontname='Arial')

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        for rel in self.relationships:
            if rel['type'] == 'inheritance':
                dot.edge(rel['from'], rel['to'], arrowhead='onormal',
                         style='dashed', color='darkgreen')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DOT —Ñ–∞–π–ª
        dot.save(output_file)
        return output_file

    def generate_diagram(self, output_file='class_diagram'):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        dot_file = self.generate_dot_file()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DOT –≤ PNG
        try:
            graphviz.render('dot', 'png', dot_file)
            print(f"‚úÖ –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {output_file}.png")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Graphviz —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH")


def run_pylint_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é pylint"""
    print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é pylint...")

    commands = [
        ['pylint', '--reports=y', '--output-format=text', 'book.py'],
        ['pylint', '--reports=y', '--output-format=text', 'reader.py'],
        ['pylint', '--reports=y', '--output-format=text', 'library.py'],
        ['pylint', '--reports=y', '--output-format=text', 'main_window.py']
    ]

    for cmd in commands:
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            print(f"\n{'=' * 50}")
            print(f"–ê–Ω–∞–ª–∏–∑ {cmd[-1]}:")
            print(result.stdout)
            if result.stderr:
                print("–û—à–∏–±–∫–∏:", result.stderr)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {cmd[-1]}: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UML –¥–∏–∞–≥—Ä–∞–º–º—ã –∫–ª–∞—Å—Å–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
    print("=" * 50)

    # 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å pylint
    run_pylint_analysis()

    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UML –¥–∏–∞–≥—Ä–∞–º–º—ã
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UML –¥–∏–∞–≥—Ä–∞–º–º—ã –∫–ª–∞—Å—Å–æ–≤...")

    generator = UMLGenerator('.')
    generator.parse_python_files()
    generator.analyze_relationships()
    generator.generate_diagram()

    print("\n‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("   - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏")
    print("   - UML –¥–∏–∞–≥—Ä–∞–º–º–∞: class_diagram.png")


if __name__ == "__main__":
    main()