from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QTabWidget, QTableWidget, QTableWidgetItem,
                             QPushButton, QLineEdit, QTextEdit, QLabel,
                             QMessageBox, QComboBox, QHeaderView, QGroupBox,
                             QFormLayout, QFrame, QSplitter)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont, QPalette, QColor
from library import Library
from book import Book
from reader import Reader


class LibraryApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.library = Library()
        self.library.load_from_file()

        self.setup_styles()
        self.init_ui()
        self.load_data_to_tables()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –∏ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f7fa;
            }
            QTabWidget::pane {
                border: 1px solid #c4c7c5;
                background-color: white;
                border-radius: 4px;
            }
            QTabBar::tab {
                background-color: #e1e5ea;
                color: #2c3e50;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
                font-weight: bold;
            }
            QTabBar::tab:selected {
                background-color: #3498db;
                color: white;
            }
            QTabBar::tab:hover {
                background-color: #2980b9;
                color: white;
            }
            QGroupBox {
                font-weight: bold;
                font-size: 12px;
                color: #2c3e50;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
            QPushButton.success {
                background-color: #27ae60;
            }
            QPushButton.success:hover {
                background-color: #219653;
            }
            QPushButton.warning {
                background-color: #e67e22;
            }
            QPushButton.warning:hover {
                background-color: #d35400;
            }
            QLineEdit, QComboBox {
                padding: 6px;
                border: 2px solid #bdc3c7;
                border-radius: 4px;
                background-color: white;
                font-size: 12px;
            }
            QLineEdit:focus, QComboBox:focus {
                border-color: #3498db;
            }
            QTableWidget {
                gridline-color: #bdc3c7;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                background-color: white;
                alternate-background-color: #f8f9fa;
            }
            QTableWidget::item {
                padding: 6px;
                border-bottom: 1px solid #ecf0f1;
            }
            QTableWidget::item:selected {
                background-color: #3498db;
                color: white;
            }
            QHeaderView::section {
                background-color: #34495e;
                color: white;
                padding: 8px;
                border: none;
                font-weight: bold;
            }
            QTextEdit {
                border: 2px solid #bdc3c7;
                border-radius: 4px;
                background-color: white;
                font-family: 'Courier New';
                font-size: 11px;
            }
            QLabel {
                color: #2c3e50;
                font-weight: bold;
            }
            QLabel.title {
                font-size: 14px;
                color: #3498db;
                padding: 5px;
            }
        """)

    def init_ui(self):
        self.setWindowTitle("üìö –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π")
        self.setGeometry(100, 100, 1200, 800)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üìñ –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
                padding: 10px;
                background-color: #3498db;
                color: white;
                border-radius: 8px;
            }
        """)
        layout.addWidget(title_label)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()
        tabs.setDocumentMode(True)
        layout.addWidget(tabs)

        # –í–∫–ª–∞–¥–∫–∏
        books_tab = self.create_books_tab()
        readers_tab = self.create_readers_tab()
        operations_tab = self.create_operations_tab()
        stats_tab = self.create_stats_tab()

        tabs.addTab(books_tab, "üìï –ö–Ω–∏–≥–∏")
        tabs.addTab(readers_tab, "üë• –ß–∏—Ç–∞—Ç–µ–ª–∏")
        tabs.addTab(operations_tab, "üîÑ –û–ø–µ—Ä–∞—Ü–∏–∏")
        tabs.addTab(stats_tab, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–∏–∑—É
        control_layout = QHBoxLayout()

        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        save_btn.setProperty("class", "success")
        save_btn.clicked.connect(self.save_data)

        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_data_to_tables)

        control_layout.addWidget(save_btn)
        control_layout.addWidget(refresh_btn)
        control_layout.addStretch()

        layout.addLayout(control_layout)

    def create_books_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setSpacing(15)

        # –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
        add_group = QGroupBox("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É")
        add_layout = QFormLayout(add_group)
        add_layout.setVerticalSpacing(10)
        add_layout.setHorizontalSpacing(15)

        self.title_input = QLineEdit()
        self.title_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏...")

        self.author_input = QLineEdit()
        self.author_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞...")

        self.isbn_input = QLineEdit()
        self.isbn_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ ISBN...")

        self.year_input = QLineEdit()
        self.year_input.setPlaceholderText("–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")

        add_layout.addRow("üìñ –ù–∞–∑–≤–∞–Ω–∏–µ:", self.title_input)
        add_layout.addRow("‚úçÔ∏è –ê–≤—Ç–æ—Ä:", self.author_input)
        add_layout.addRow("üè∑Ô∏è ISBN:", self.isbn_input)
        add_layout.addRow("üìÖ –ì–æ–¥:", self.year_input)

        add_book_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
        add_book_btn.setProperty("class", "success")
        add_book_btn.clicked.connect(self.add_book)
        add_layout.addRow(add_book_btn)

        # –¢–∞–±–ª–∏—Ü–∞ –∫–Ω–∏–≥
        table_group = QGroupBox("–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ")
        table_layout = QVBoxLayout(table_group)

        self.books_table = QTableWidget()
        self.books_table.setColumnCount(5)
        self.books_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ê–≤—Ç–æ—Ä", "ISBN", "–ì–æ–¥", "–°—Ç–∞—Ç—É—Å"])
        self.books_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.books_table.setAlternatingRowColors(True)

        table_layout.addWidget(self.books_table)

        layout.addWidget(add_group)
        layout.addWidget(table_group)

        return widget

    def create_readers_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setSpacing(15)

        # –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è
        add_group = QGroupBox("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è")
        add_layout = QFormLayout(add_group)
        add_layout.setVerticalSpacing(10)
        add_layout.setHorizontalSpacing(15)

        self.reader_name_input = QLineEdit()
        self.reader_name_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —á–∏—Ç–∞—Ç–µ–ª—è...")

        self.reader_id_input = QLineEdit()
        self.reader_id_input.setPlaceholderText("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä...")

        self.phone_input = QLineEdit()
        self.phone_input.setPlaceholderText("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")

        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("Email –∞–¥—Ä–µ—Å...")

        add_layout.addRow("üë§ –§–ò–û:", self.reader_name_input)
        add_layout.addRow("üÜî ID —á–∏—Ç–∞—Ç–µ–ª—è:", self.reader_id_input)
        add_layout.addRow("üìû –¢–µ–ª–µ—Ñ–æ–Ω:", self.phone_input)
        add_layout.addRow("üìß Email:", self.email_input)

        add_reader_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è")
        add_reader_btn.setProperty("class", "success")
        add_reader_btn.clicked.connect(self.add_reader)
        add_layout.addRow(add_reader_btn)

        # –¢–∞–±–ª–∏—Ü–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        table_group = QGroupBox("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∏—Ç–∞—Ç–µ–ª–∏")
        table_layout = QVBoxLayout(table_group)

        self.readers_table = QTableWidget()
        self.readers_table.setColumnCount(4)
        self.readers_table.setHorizontalHeaderLabels(["–§–ò–û", "ID", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email"])
        self.readers_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.readers_table.setAlternatingRowColors(True)

        table_layout.addWidget(self.readers_table)

        layout.addWidget(add_group)
        layout.addWidget(table_group)

        return widget

    def create_operations_tab(self):
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setSpacing(20)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ–ø–µ—Ä–∞—Ü–∏–∏
        left_panel = QFrame()
        left_layout = QVBoxLayout(left_panel)
        left_layout.setSpacing(15)

        # –í—ã–¥–∞—á–∞ –∫–Ω–∏–≥–∏
        lend_group = QGroupBox("üì§ –í—ã–¥–∞—á–∞ –∫–Ω–∏–≥–∏")
        lend_layout = QFormLayout(lend_group)
        lend_layout.setVerticalSpacing(10)

        self.lend_isbn_input = QLineEdit()
        self.lend_isbn_input.setPlaceholderText("ISBN –∫–Ω–∏–≥–∏...")

        self.lend_reader_id_input = QLineEdit()
        self.lend_reader_id_input.setPlaceholderText("ID —á–∏—Ç–∞—Ç–µ–ª—è...")

        lend_layout.addRow("üè∑Ô∏è ISBN –∫–Ω–∏–≥–∏:", self.lend_isbn_input)
        lend_layout.addRow("üÜî ID —á–∏—Ç–∞—Ç–µ–ª—è:", self.lend_reader_id_input)

        lend_btn = QPushButton("üì§ –í—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É")
        lend_btn.clicked.connect(self.lend_book)
        lend_layout.addRow(lend_btn)

        # –í–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏
        return_group = QGroupBox("üì• –í–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏")
        return_layout = QFormLayout(return_group)
        return_layout.setVerticalSpacing(10)

        self.return_isbn_input = QLineEdit()
        self.return_isbn_input.setPlaceholderText("ISBN –∫–Ω–∏–≥–∏...")

        self.return_reader_id_input = QLineEdit()
        self.return_reader_id_input.setPlaceholderText("ID —á–∏—Ç–∞—Ç–µ–ª—è...")

        return_layout.addRow("üè∑Ô∏è ISBN –∫–Ω–∏–≥–∏:", self.return_isbn_input)
        return_layout.addRow("üÜî ID —á–∏—Ç–∞—Ç–µ–ª—è:", self.return_reader_id_input)

        return_btn = QPushButton("üì• –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É")
        return_btn.clicked.connect(self.return_book)
        return_layout.addRow(return_btn)

        # –ü–æ–∏—Å–∫ –∫–Ω–∏–≥
        search_group = QGroupBox("üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥")
        search_layout = QVBoxLayout(search_group)

        search_type_layout = QHBoxLayout()
        search_type_layout.addWidget(QLabel("–ü–æ–∏—Å–∫ –ø–æ:"))
        self.search_type = QComboBox()
        self.search_type.addItems(["–ê–≤—Ç–æ—Ä—É", "–ù–∞–∑–≤–∞–Ω–∏—é"])
        search_type_layout.addWidget(self.search_type)
        search_type_layout.addStretch()

        search_term_layout = QHBoxLayout()
        search_term_layout.addWidget(QLabel("–ó–∞–ø—Ä–æ—Å:"))
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...")
        search_term_layout.addWidget(self.search_input)

        search_btn = QPushButton("üîç –ù–∞–π—Ç–∏ –∫–Ω–∏–≥–∏")
        search_btn.clicked.connect(self.search_books)

        search_layout.addLayout(search_type_layout)
        search_layout.addLayout(search_term_layout)
        search_layout.addWidget(search_btn)

        left_layout.addWidget(lend_group)
        left_layout.addWidget(return_group)
        left_layout.addWidget(search_group)
        left_layout.addStretch()

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        right_panel = QFrame()
        right_layout = QVBoxLayout(right_panel)

        results_group = QGroupBox("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        results_layout = QVBoxLayout(results_group)

        self.search_results = QTextEdit()
        self.search_results.setMinimumHeight(400)
        self.search_results.setPlaceholderText("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...")

        results_layout.addWidget(self.search_results)

        right_layout.addWidget(results_group)

        layout.addWidget(left_panel)
        layout.addWidget(right_panel)
        layout.setStretchFactor(left_panel, 1)
        layout.setStretchFactor(right_panel, 2)

        return widget

    def create_stats_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setSpacing(15)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
        stats_layout = QHBoxLayout(stats_group)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–Ω–∏–≥
        books_card = QFrame()
        books_card.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3498db, stop:1 #2980b9);
                border-radius: 8px;
                padding: 15px;
            }
            QLabel {
                color: white;
                font-weight: bold;
            }
        """)
        books_layout = QVBoxLayout(books_card)
        books_title = QLabel("üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥")
        books_title.setStyleSheet("font-size: 14px;")
        books_count = QLabel("0")
        books_count.setStyleSheet("font-size: 24px; font-weight: bold;")
        books_layout.addWidget(books_title)
        books_layout.addWidget(books_count)
        books_layout.addStretch()

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        readers_card = QFrame()
        readers_card.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #27ae60, stop:1 #219653);
                border-radius: 8px;
                padding: 15px;
            }
            QLabel {
                color: white;
                font-weight: bold;
            }
        """)
        readers_layout = QVBoxLayout(readers_card)
        readers_title = QLabel("üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π")
        readers_title.setStyleSheet("font-size: 14px;")
        readers_count = QLabel("0")
        readers_count.setStyleSheet("font-size: 24px; font-weight: bold;")
        readers_layout.addWidget(readers_title)
        readers_layout.addWidget(readers_count)
        readers_layout.addStretch()

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥
        available_card = QFrame()
        available_card.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e67e22, stop:1 #d35400);
                border-radius: 8px;
                padding: 15px;
            }
            QLabel {
                color: white;
                font-weight: bold;
            }
        """)
        available_layout = QVBoxLayout(available_card)
        available_title = QLabel("‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∫–Ω–∏–≥")
        available_title.setStyleSheet("font-size: 14px;")
        available_count = QLabel("0")
        available_count.setStyleSheet("font-size: 24px; font-weight: bold;")
        available_layout.addWidget(available_title)
        available_layout.addWidget(available_count)
        available_layout.addStretch()

        stats_layout.addWidget(books_card)
        stats_layout.addWidget(readers_card)
        stats_layout.addWidget(available_card)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        recent_group = QGroupBox("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–Ω–∏–≥–∏")
        recent_layout = QVBoxLayout(recent_group)

        self.recent_books_table = QTableWidget()
        self.recent_books_table.setColumnCount(4)
        self.recent_books_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ê–≤—Ç–æ—Ä", "ISBN", "–°—Ç–∞—Ç—É—Å"])
        self.recent_books_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.recent_books_table.setAlternatingRowColors(True)

        recent_layout.addWidget(self.recent_books_table)

        layout.addWidget(stats_group)
        layout.addWidget(recent_group)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.books_count_label = books_count
        self.readers_count_label = readers_count
        self.available_count_label = available_count

        return widget

    # –î–∞–ª–µ–µ –∏–¥—É—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ (add_book, add_reader, lend_book, return_book, search_books, load_data_to_tables –∏ —Ç.–¥.)
    # –Ø –∏—Ö –Ω–µ –º–µ–Ω—è–ª, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—é –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ:

    def add_book(self):
        title = self.title_input.text().strip()
        author = self.author_input.text().strip()
        isbn = self.isbn_input.text().strip()
        year = self.year_input.text().strip()

        if not title or not author or not isbn:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä, ISBN")
            return

        if self.library.find_book_by_isbn(isbn):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º ISBN —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        year_int = int(year) if year.isdigit() else None
        book = Book(title, author, isbn, year_int)
        result = self.library.add_book(book)

        QMessageBox.information(self, "–£—Å–ø–µ—Ö", result)
        self.clear_book_form()
        self.load_data_to_tables()

    def add_reader(self):
        name = self.reader_name_input.text().strip()
        reader_id = self.reader_id_input.text().strip()
        phone = self.phone_input.text().strip()
        email = self.email_input.text().strip()

        if not name or not reader_id:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏–º—è, ID —á–∏—Ç–∞—Ç–µ–ª—è")
            return

        if self.library.find_reader_by_id(reader_id):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ß–∏—Ç–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        reader = Reader(name, reader_id, phone, email)
        result = self.library.register_reader(reader)

        QMessageBox.information(self, "–£—Å–ø–µ—Ö", result)
        self.clear_reader_form()
        self.load_data_to_tables()

    def lend_book(self):
        isbn = self.lend_isbn_input.text().strip()
        reader_id = self.lend_reader_id_input.text().strip()

        if not isbn or not reader_id:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        result = self.library.lend_book(isbn, reader_id)
        QMessageBox.information(self, "–†–µ–∑—É–ª—å—Ç–∞—Ç", result)
        self.lend_isbn_input.clear()
        self.lend_reader_id_input.clear()
        self.load_data_to_tables()

    def return_book(self):
        isbn = self.return_isbn_input.text().strip()
        reader_id = self.return_reader_id_input.text().strip()

        if not isbn or not reader_id:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        result = self.library.return_book(isbn, reader_id)
        QMessageBox.information(self, "–†–µ–∑—É–ª—å—Ç–∞—Ç", result)
        self.return_isbn_input.clear()
        self.return_reader_id_input.clear()
        self.load_data_to_tables()

    def search_books(self):
        search_term = self.search_input.text().strip()
        if not search_term:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return

        search_type = self.search_type.currentText()
        if search_type == "–ê–≤—Ç–æ—Ä—É":
            results = self.library.find_books_by_author(search_term)
        else:
            results = self.library.find_books_by_title(search_term)

        if results:
            result_text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –∫–Ω–∏–≥:\n\n"
            for book in results:
                status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if book.is_available else "‚ùå –í—ã–¥–∞–Ω–∞"
                result_text += f"‚Ä¢ {book.title} - {book.author} [{status}]\n"
            self.search_results.setText(result_text)
        else:
            self.search_results.setText("‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    def load_data_to_tables(self):
        self.load_books_table()
        self.load_readers_table()
        self.load_stats()
        self.load_recent_books()

    def load_books_table(self):
        books = self.library.get_all_books()
        self.books_table.setRowCount(len(books))

        for row, book in enumerate(books):
            self.books_table.setItem(row, 0, QTableWidgetItem(book.title))
            self.books_table.setItem(row, 1, QTableWidgetItem(book.author))
            self.books_table.setItem(row, 2, QTableWidgetItem(book.isbn))
            self.books_table.setItem(row, 3, QTableWidgetItem(str(book.year) if book.year else ""))
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if book.is_available else "‚ùå –í—ã–¥–∞–Ω–∞"
            status_item = QTableWidgetItem(status)
            if book.is_available:
                status_item.setBackground(QColor(39, 174, 96, 50))
            else:
                status_item.setBackground(QColor(231, 76, 60, 50))
            self.books_table.setItem(row, 4, status_item)

    def load_readers_table(self):
        readers = self.library.get_all_readers()
        self.readers_table.setRowCount(len(readers))

        for row, reader in enumerate(readers):
            self.readers_table.setItem(row, 0, QTableWidgetItem(reader.name))
            self.readers_table.setItem(row, 1, QTableWidgetItem(reader.reader_id))
            self.readers_table.setItem(row, 2, QTableWidgetItem(reader.phone if reader.phone else ""))
            self.readers_table.setItem(row, 3, QTableWidgetItem(reader.email if reader.email else ""))

    def load_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_books = len(self.library.get_all_books())
        total_readers = len(self.library.get_all_readers())
        available_books = len(self.library.get_available_books())

        self.books_count_label.setText(str(total_books))
        self.readers_count_label.setText(str(total_readers))
        self.available_count_label.setText(str(available_books))

    def load_recent_books(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–Ω–∏–≥"""
        books = self.library.get_all_books()[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–Ω–∏–≥
        self.recent_books_table.setRowCount(len(books))

        for row, book in enumerate(books):
            self.recent_books_table.setItem(row, 0, QTableWidgetItem(book.title))
            self.recent_books_table.setItem(row, 1, QTableWidgetItem(book.author))
            self.recent_books_table.setItem(row, 2, QTableWidgetItem(book.isbn))
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if book.is_available else "‚ùå –í—ã–¥–∞–Ω–∞"
            status_item = QTableWidgetItem(status)
            if book.is_available:
                status_item.setBackground(QColor(39, 174, 96, 50))
            else:
                status_item.setBackground(QColor(231, 76, 60, 50))
            self.recent_books_table.setItem(row, 3, status_item)

    def clear_book_form(self):
        self.title_input.clear()
        self.author_input.clear()
        self.isbn_input.clear()
        self.year_input.clear()

    def clear_reader_form(self):
        self.reader_name_input.clear()
        self.reader_id_input.clear()
        self.phone_input.clear()
        self.email_input.clear()

    def save_data(self):
        self.library.save_to_file()
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    def closeEvent(self, event):
        self.save_data()
        event.accept()